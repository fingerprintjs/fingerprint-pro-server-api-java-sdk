apply plugin: 'org.openapi.generator'

group = 'com.fingerprint'
version = '5.1.1'

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:2.3.+'
        classpath 'com.github.dcendents:android-maven-gradle-plugin:2.1'
        classpath "org.openapitools:openapi-generator-gradle-plugin:6.2.0"
    }
}

repositories {
    mavenLocal()
    mavenCentral()
}

apply plugin: 'java-library'
apply plugin: 'maven-publish'

compileJava {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

publishing {
    publications {
        maven(MavenPublication) {
           artifactId = 'fingerprint-pro-server-api-sdk'
           artifact jar
        }
        localPublication(MavenPublication) {
            artifact jar
            groupId 'com.fingerprint'
            artifactId 'fingerprint-pro-server-api-sdk'
            version '5.1.1'
        }
    }
}

tasks.register('execute', JavaExec) {
   main = System.getProperty('mainClass')
   classpath = sourceSets.main.runtimeClasspath
}

dependencies {
    implementation libs.swagger.annotations
    implementation libs.jsr305
    api libs.jersey.client
    api libs.jersey.hk2
    api libs.jersey.media.json
    api libs.jersey.media.multipart
    api libs.jersey.apache.connector
    api libs.jackson.core
    api libs.jackson.annotations
    api libs.jackson.databind
    api libs.jackson.databind.nullable
    api libs.jackson.jsr310
    testImplementation libs.junit.jupiter.api
    testRuntimeOnly libs.junit.jupiter.engine
    testImplementation libs.mockito
}

test {
    useJUnitPlatform()
}

javadoc {
    options.tags = [ "http.response.details:a:Http Response Details" ]
}

sourceSets {
    main {
        java {
            srcDir 'src/main/java'
            srcDir 'src/examples/java'
            srcDir "$buildDir/api/src/main/java"
        }
    }
}

openApiGenerate {
    generatorName.set("java")
    inputSpec.set("$rootDir/res/fingerprint-server-api.yaml")
    outputDir.set("$buildDir/api")
    groupId.set("com.fingerprint")
    id.set("fingerprint-pro-server-api-sdk")
    version.set("5.1.1")
    apiPackage.set("com.fingerprint.api")
    modelPackage.set("com.fingerprint.model")
    invokerPackage.set("com.fingerprint.sdk")
    library.set("jersey2")
    templateDir.set("template")

    gitHost.set("github.com")
    gitRepoId.set("fingerprint-pro-server-api-java-sdk")
    gitUserId.set("fingerprintjs")
    configOptions.put("hideGenerationTimestamp", "true")
}
compileJava.dependsOn tasks.openApiGenerate
processResources.dependsOn tasks.openApiGenerate

jar {
    exclude 'com/fingerprint/example/**'
    duplicatesStrategy 'exclude'
}

tasks.register('copyDocs', Copy) {
    into "docs"
    from layout.buildDirectory.dir("api/docs")
}
copyDocs.dependsOn tasks.openApiGenerate

tasks.register('removeWrongDocumentationLinks') {
    doLast {
        fileTree("./docs").visit { FileVisitDetails details ->
            if (details.file.isFile()) {
                def fileContents = details.file.text
                fileContents = fileContents.replace("[**OffsetDateTime**](OffsetDateTime.md)", "**OffsetDateTime**")
                fileContents = fileContents.replace("[**URI**](URI.md)", "**URI**")
                details.file.text = fileContents
            }
        }
    }
}
removeWrongDocumentationLinks.dependsOn tasks.copyDocs