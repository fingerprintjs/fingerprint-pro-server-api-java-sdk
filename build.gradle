apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'com.diffplug.spotless'

group = 'com.fingerprint'
version = '1.1.0'

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:2.3.+'
        classpath 'com.github.dcendents:android-maven-gradle-plugin:2.1'
        classpath 'com.diffplug.spotless:spotless-plugin-gradle:6.3.0'
    }
}

repositories {
    mavenLocal()
    mavenCentral()
}

apply plugin: 'java'
apply plugin: 'maven-publish'
sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

publishing {
    publications {
        maven(MavenPublication) {
           artifactId = 'fingerprint-pro-server-api-sdk'
           artifact jar
        }
        localPublication(MavenPublication) {
            artifact jar
            groupId 'com.fingerprint'
            artifactId 'fingerprint-pro-server-api-sdk'
            version '1.1.0'
        }
    }
}

tasks.register('execute', JavaExec) {
   main = System.getProperty('mainClass')
   classpath = sourceSets.main.runtimeClasspath
}

ext {
    swagger_annotations_version = "1.6.5"
    jackson_version = "2.13.4"
    jackson_databind_version = "2.13.4.2"
    jackson_databind_nullable_version = "0.2.4"
    jakarta_annotation_version = "1.3.5"
    jersey_version = "2.35"
    junit_version = "5.8.2"
}

dependencies {
    implementation "io.swagger:swagger-annotations:$swagger_annotations_version"
    implementation "com.google.code.findbugs:jsr305:3.0.2"
    implementation "org.glassfish.jersey.core:jersey-client:$jersey_version"
    implementation "org.glassfish.jersey.inject:jersey-hk2:$jersey_version"
    implementation "org.glassfish.jersey.media:jersey-media-multipart:$jersey_version"
    implementation "org.glassfish.jersey.media:jersey-media-json-jackson:$jersey_version"
    implementation "org.glassfish.jersey.connectors:jersey-apache-connector:$jersey_version"
    implementation "com.fasterxml.jackson.core:jackson-core:$jackson_version"
    implementation "com.fasterxml.jackson.core:jackson-annotations:$jackson_version"
    implementation "com.fasterxml.jackson.core:jackson-databind:$jackson_databind_version"
    implementation "org.openapitools:jackson-databind-nullable:$jackson_databind_nullable_version"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:$jackson_version"
    implementation "jakarta.annotation:jakarta.annotation-api:$jakarta_annotation_version"
    testImplementation "org.junit.jupiter:junit-jupiter-api:$junit_version"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junit_version"
    testImplementation 'org.mockito:mockito-all:1.10.19'
}

test {
    useJUnitPlatform()
}

javadoc {
    options.tags = [ "http.response.details:a:Http Response Details" ]
}

sourceSets {
    main {
        java {
            srcDir 'src/main/java'
            srcDir 'src/examples/java'
        }
    }
}

// Use spotless plugin to automatically format code, remove unused import, etc
// To apply changes directly to the file, run `gradlew spotlessApply`
// Ref: https://github.com/diffplug/spotless/tree/main/plugin-gradle
spotless {
    // comment out below to run spotless as part of the `check` task
    enforceCheck false

    format 'misc', {
        // define the files (e.g. '*.gradle', '*.md') to apply `misc` to
        target '.gitignore'
        // define the steps to apply to those files
        trimTrailingWhitespace()
        indentWithSpaces() // Takes an integer argument if you don't like 4
        endWithNewline()
    }
    java {
        // don't need to set target, it is inferred from java
        // apply a specific flavor of google-java-format
        googleJavaFormat('1.8').aosp().reflowLongStrings()
        removeUnusedImports()
        importOrder()
    }
}

jar {
    exclude 'com/fingerprint/example/**'
    duplicatesStrategy 'exclude'
    from configurations.runtimeClasspath.findAll { it.name.endsWith('jar') }.collect { zipTree(it) }
}

tasks.register('runFunctionalTests', JavaExec) {
    group = "execute"
    description = "Run the Functional Tests"
    classpath = sourceSets.main.runtimeClasspath
    main = 'com.fingerprint.example.FunctionalTests'
}

tasks.register('removeWrongDocumentationLinks') {
    doLast {
        fileTree("./docs").visit { FileVisitDetails details ->
            if (details.file.isFile()) {
                def fileContents = details.file.text
                fileContents = fileContents.replace("[**OffsetDateTime**](OffsetDateTime.md)", "**OffsetDateTime**")
                fileContents = fileContents.replace("[**URI**](URI.md)", "**URI**")
                details.file.text = fileContents
            }
        }
    }
}
