/*
 * Server API
 * # Overview Fingerprint Server API allows you to get, search, and update Events in a server environment. It can be used for data exports, decision-making, and data analysis scenarios. Server API is intended for server-side usage, it's not intended to be used from the client side, whether it's a browser or a mobile device. 
 *
 * The version of the OpenAPI document: 4
 * Contact: support@fingerprint.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.fingerprint.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import java.util.Locale;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fingerprint.model.Event;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fingerprint.sdk.JSON;


/**
 * Contains a list of all identification events matching the specified search criteria.
 */
@JsonPropertyOrder({
  EventSearch.JSON_PROPERTY_EVENTS,
  EventSearch.JSON_PROPERTY_PAGINATION_KEY,
  EventSearch.JSON_PROPERTY_TOTAL_HITS
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.16.0")
public class EventSearch {
  public static final String JSON_PROPERTY_EVENTS = "events";
  @jakarta.annotation.Nonnull
  private List<Event> events = new ArrayList<>();

  public static final String JSON_PROPERTY_PAGINATION_KEY = "pagination_key";
  @jakarta.annotation.Nullable
  private String paginationKey;

  public static final String JSON_PROPERTY_TOTAL_HITS = "total_hits";
  @jakarta.annotation.Nullable
  private Long totalHits;

  public EventSearch() { 
  }

  public EventSearch events(@jakarta.annotation.Nonnull List<Event> events) {
    this.events = events;
    return this;
  }

  public EventSearch addEventsItem(Event eventsItem) {
    if (this.events == null) {
      this.events = new ArrayList<>();
    }
    this.events.add(eventsItem);
    return this;
  }

  /**
   * Get events
   * @return events
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(value = JSON_PROPERTY_EVENTS, required = true)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<Event> getEvents() {
    return events;
  }


  @JsonProperty(value = JSON_PROPERTY_EVENTS, required = true)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setEvents(@jakarta.annotation.Nonnull List<Event> events) {
    this.events = events;
  }


  public EventSearch paginationKey(@jakarta.annotation.Nullable String paginationKey) {
    this.paginationKey = paginationKey;
    return this;
  }

  /**
   * Use this value in the &#x60;pagination_key&#x60; parameter to request the next page of search results.
   * @return paginationKey
   */
  @jakarta.annotation.Nullable
  @JsonProperty(value = JSON_PROPERTY_PAGINATION_KEY, required = false)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPaginationKey() {
    return paginationKey;
  }


  @JsonProperty(value = JSON_PROPERTY_PAGINATION_KEY, required = false)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPaginationKey(@jakarta.annotation.Nullable String paginationKey) {
    this.paginationKey = paginationKey;
  }


  public EventSearch totalHits(@jakarta.annotation.Nullable Long totalHits) {
    this.totalHits = totalHits;
    return this;
  }

  /**
   * This value represents the total number of events matching the search query, up to the limit provided in the &#x60;total_hits&#x60; query parameter. Only present if the &#x60;total_hits&#x60; query parameter was provided.
   * @return totalHits
   */
  @jakarta.annotation.Nullable
  @JsonProperty(value = JSON_PROPERTY_TOTAL_HITS, required = false)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getTotalHits() {
    return totalHits;
  }


  @JsonProperty(value = JSON_PROPERTY_TOTAL_HITS, required = false)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTotalHits(@jakarta.annotation.Nullable Long totalHits) {
    this.totalHits = totalHits;
  }


  /**
   * Return true if this EventSearch object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EventSearch eventSearch = (EventSearch) o;
    return Objects.equals(this.events, eventSearch.events) &&
        Objects.equals(this.paginationKey, eventSearch.paginationKey) &&
        Objects.equals(this.totalHits, eventSearch.totalHits);
  }

  @Override
  public int hashCode() {
    return Objects.hash(events, paginationKey, totalHits);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EventSearch {\n");
    sb.append("    events: ").append(toIndentedString(events)).append("\n");
    sb.append("    paginationKey: ").append(toIndentedString(paginationKey)).append("\n");
    sb.append("    totalHits: ").append(toIndentedString(totalHits)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

