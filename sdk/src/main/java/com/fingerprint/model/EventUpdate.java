/*
 * Server API
 * # Overview Fingerprint Server API allows you to get, search, and update Events in a server environment. It can be used for data exports, decision-making, and data analysis scenarios. Server API is intended for server-side usage, it's not intended to be used from the client side, whether it's a browser or a mobile device. 
 *
 * The version of the OpenAPI document: 4
 * Contact: support@fingerprint.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.fingerprint.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import java.util.Locale;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fingerprint.sdk.JSON;


/**
 * EventUpdate
 */
@JsonPropertyOrder({
  EventUpdate.JSON_PROPERTY_LINKED_ID,
  EventUpdate.JSON_PROPERTY_TAGS,
  EventUpdate.JSON_PROPERTY_SUSPECT
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.16.0")
public class EventUpdate {
  public static final String JSON_PROPERTY_LINKED_ID = "linked_id";
  @jakarta.annotation.Nullable
  private String linkedId;

  public static final String JSON_PROPERTY_TAGS = "tags";
  @jakarta.annotation.Nullable
  private Object tags;

  public static final String JSON_PROPERTY_SUSPECT = "suspect";
  @jakarta.annotation.Nullable
  private Boolean suspect;

  public EventUpdate() { 
  }

  public EventUpdate linkedId(@jakarta.annotation.Nullable String linkedId) {
    this.linkedId = linkedId;
    return this;
  }

  /**
   * Linked Id value to assign to the existing event
   * @return linkedId
   */
  @jakarta.annotation.Nullable
  @JsonProperty(value = JSON_PROPERTY_LINKED_ID, required = false)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getLinkedId() {
    return linkedId;
  }


  @JsonProperty(value = JSON_PROPERTY_LINKED_ID, required = false)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLinkedId(@jakarta.annotation.Nullable String linkedId) {
    this.linkedId = linkedId;
  }


  public EventUpdate tags(@jakarta.annotation.Nullable Object tags) {
    this.tags = tags;
    return this;
  }

  /**
   * A customer-provided value or an object that was sent with the identification request or updated later.
   * @return tags
   */
  @jakarta.annotation.Nullable
  @JsonProperty(value = JSON_PROPERTY_TAGS, required = false)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Object getTags() {
    return tags;
  }


  @JsonProperty(value = JSON_PROPERTY_TAGS, required = false)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTags(@jakarta.annotation.Nullable Object tags) {
    this.tags = tags;
  }


  public EventUpdate suspect(@jakarta.annotation.Nullable Boolean suspect) {
    this.suspect = suspect;
    return this;
  }

  /**
   * Suspect flag indicating observed suspicious or fraudulent event
   * @return suspect
   */
  @jakarta.annotation.Nullable
  @JsonProperty(value = JSON_PROPERTY_SUSPECT, required = false)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getSuspect() {
    return suspect;
  }


  @JsonProperty(value = JSON_PROPERTY_SUSPECT, required = false)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSuspect(@jakarta.annotation.Nullable Boolean suspect) {
    this.suspect = suspect;
  }


  /**
   * Return true if this EventUpdate object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EventUpdate eventUpdate = (EventUpdate) o;
    return Objects.equals(this.linkedId, eventUpdate.linkedId) &&
        Objects.equals(this.tags, eventUpdate.tags) &&
        Objects.equals(this.suspect, eventUpdate.suspect);
  }

  @Override
  public int hashCode() {
    return Objects.hash(linkedId, tags, suspect);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EventUpdate {\n");
    sb.append("    linkedId: ").append(toIndentedString(linkedId)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    suspect: ").append(toIndentedString(suspect)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

