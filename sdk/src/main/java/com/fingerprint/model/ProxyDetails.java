/*
 * Server API
 * # Overview Fingerprint Server API allows you to get, search, and update Events in a server environment. It can be used for data exports, decision-making, and data analysis scenarios. Server API is intended for server-side usage, it's not intended to be used from the client side, whether it's a browser or a mobile device. 
 *
 * The version of the OpenAPI document: 4
 * Contact: support@fingerprint.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.fingerprint.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import java.util.Locale;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fingerprint.sdk.JSON;


/**
 * Proxy detection details (present if &#x60;proxy&#x60; is &#x60;true&#x60;)
 */
@JsonPropertyOrder({
  ProxyDetails.JSON_PROPERTY_PROXY_TYPE,
  ProxyDetails.JSON_PROPERTY_LAST_SEEN_AT
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.16.0")
public class ProxyDetails {
  /**
   * Residential proxies use real user IP addresses to appear as legitimate traffic,  while data center proxies are public proxies hosted in data centers 
   */
  public enum ProxyTypeEnum {
    RESIDENTIAL(String.valueOf("residential")),
    
    DATA_CENTER(String.valueOf("data_center"));

    private String value;

    ProxyTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ProxyTypeEnum fromValue(String value) {
      for (ProxyTypeEnum b : ProxyTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_PROXY_TYPE = "proxy_type";
  @jakarta.annotation.Nonnull
  private ProxyTypeEnum proxyType;

  public static final String JSON_PROPERTY_LAST_SEEN_AT = "last_seen_at";
  @jakarta.annotation.Nullable
  private Long lastSeenAt;

  public ProxyDetails() { 
  }

  public ProxyDetails proxyType(@jakarta.annotation.Nonnull ProxyTypeEnum proxyType) {
    this.proxyType = proxyType;
    return this;
  }

  /**
   * Residential proxies use real user IP addresses to appear as legitimate traffic,  while data center proxies are public proxies hosted in data centers 
   * @return proxyType
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(value = JSON_PROPERTY_PROXY_TYPE, required = true)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public ProxyTypeEnum getProxyType() {
    return proxyType;
  }


  @JsonProperty(value = JSON_PROPERTY_PROXY_TYPE, required = true)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setProxyType(@jakarta.annotation.Nonnull ProxyTypeEnum proxyType) {
    this.proxyType = proxyType;
  }


  public ProxyDetails lastSeenAt(@jakarta.annotation.Nullable Long lastSeenAt) {
    this.lastSeenAt = lastSeenAt;
    return this;
  }

  /**
   * Unix millisecond timestamp with hourly resolution of when this IP was last seen as a proxy 
   * @return lastSeenAt
   */
  @jakarta.annotation.Nullable
  @JsonProperty(value = JSON_PROPERTY_LAST_SEEN_AT, required = false)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getLastSeenAt() {
    return lastSeenAt;
  }


  @JsonProperty(value = JSON_PROPERTY_LAST_SEEN_AT, required = false)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLastSeenAt(@jakarta.annotation.Nullable Long lastSeenAt) {
    this.lastSeenAt = lastSeenAt;
  }


  /**
   * Return true if this ProxyDetails object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProxyDetails proxyDetails = (ProxyDetails) o;
    return Objects.equals(this.proxyType, proxyDetails.proxyType) &&
        Objects.equals(this.lastSeenAt, proxyDetails.lastSeenAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(proxyType, lastSeenAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProxyDetails {\n");
    sb.append("    proxyType: ").append(toIndentedString(proxyType)).append("\n");
    sb.append("    lastSeenAt: ").append(toIndentedString(lastSeenAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

