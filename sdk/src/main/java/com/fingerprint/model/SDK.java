/*
 * Server API
 * # Overview Fingerprint Server API allows you to get, search, and update Events in a server environment. It can be used for data exports, decision-making, and data analysis scenarios. Server API is intended for server-side usage, it's not intended to be used from the client side, whether it's a browser or a mobile device. 
 *
 * The version of the OpenAPI document: 4
 * Contact: support@fingerprint.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.fingerprint.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import java.util.Locale;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fingerprint.model.Integration;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fingerprint.sdk.JSON;


/**
 * Contains information about the SDK used to perform the request.
 */
@JsonPropertyOrder({
  SDK.JSON_PROPERTY_PLATFORM,
  SDK.JSON_PROPERTY_VERSION,
  SDK.JSON_PROPERTY_INTEGRATIONS
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.16.0")
public class SDK {
  /**
   * Platform of the SDK used for the identification request.
   */
  public enum PlatformEnum {
    JS(String.valueOf("js")),
    
    ANDROID(String.valueOf("android")),
    
    IOS(String.valueOf("ios")),
    
    UNKNOWN(String.valueOf("unknown"));

    private String value;

    PlatformEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static PlatformEnum fromValue(String value) {
      for (PlatformEnum b : PlatformEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_PLATFORM = "platform";
  @jakarta.annotation.Nonnull
  private PlatformEnum platform;

  public static final String JSON_PROPERTY_VERSION = "version";
  @jakarta.annotation.Nonnull
  private String version;

  public static final String JSON_PROPERTY_INTEGRATIONS = "integrations";
  @jakarta.annotation.Nullable
  private List<Integration> integrations = new ArrayList<>();

  public SDK() { 
  }

  public SDK platform(@jakarta.annotation.Nonnull PlatformEnum platform) {
    this.platform = platform;
    return this;
  }

  /**
   * Platform of the SDK used for the identification request.
   * @return platform
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(value = JSON_PROPERTY_PLATFORM, required = true)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public PlatformEnum getPlatform() {
    return platform;
  }


  @JsonProperty(value = JSON_PROPERTY_PLATFORM, required = true)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPlatform(@jakarta.annotation.Nonnull PlatformEnum platform) {
    this.platform = platform;
  }


  public SDK version(@jakarta.annotation.Nonnull String version) {
    this.version = version;
    return this;
  }

  /**
   * Version string of the SDK used for the identification request. For example: &#x60;\&quot;3.12.1\&quot;&#x60; 
   * @return version
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(value = JSON_PROPERTY_VERSION, required = true)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getVersion() {
    return version;
  }


  @JsonProperty(value = JSON_PROPERTY_VERSION, required = true)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setVersion(@jakarta.annotation.Nonnull String version) {
    this.version = version;
  }


  public SDK integrations(@jakarta.annotation.Nullable List<Integration> integrations) {
    this.integrations = integrations;
    return this;
  }

  public SDK addIntegrationsItem(Integration integrationsItem) {
    if (this.integrations == null) {
      this.integrations = new ArrayList<>();
    }
    this.integrations.add(integrationsItem);
    return this;
  }

  /**
   * Get integrations
   * @return integrations
   */
  @jakarta.annotation.Nullable
  @JsonProperty(value = JSON_PROPERTY_INTEGRATIONS, required = false)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<Integration> getIntegrations() {
    return integrations;
  }


  @JsonProperty(value = JSON_PROPERTY_INTEGRATIONS, required = false)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIntegrations(@jakarta.annotation.Nullable List<Integration> integrations) {
    this.integrations = integrations;
  }


  /**
   * Return true if this SDK object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SDK SDK = (SDK) o;
    return Objects.equals(this.platform, SDK.platform) &&
        Objects.equals(this.version, SDK.version) &&
        Objects.equals(this.integrations, SDK.integrations);
  }

  @Override
  public int hashCode() {
    return Objects.hash(platform, version, integrations);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SDK {\n");
    sb.append("    platform: ").append(toIndentedString(platform)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    integrations: ").append(toIndentedString(integrations)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

