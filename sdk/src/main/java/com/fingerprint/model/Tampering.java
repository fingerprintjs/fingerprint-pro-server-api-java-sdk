package com.fingerprint.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fingerprint.sdk.JSON;
import io.swagger.v3.oas.annotations.media.Schema;

/**
 * Tampering
 */


@JsonPropertyOrder({
  Tampering.JSON_PROPERTY_RESULT,
  Tampering.JSON_PROPERTY_ANOMALY_SCORE,
  Tampering.JSON_PROPERTY_ANTI_DETECT_BROWSER
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.7.0")
public class Tampering {
  public static final String JSON_PROPERTY_RESULT = "result";
  private Boolean result;

  public static final String JSON_PROPERTY_ANOMALY_SCORE = "anomalyScore";
  private Double anomalyScore;

  public static final String JSON_PROPERTY_ANTI_DETECT_BROWSER = "antiDetectBrowser";
  private Boolean antiDetectBrowser;

  public Tampering() {
  }

  public Tampering result(Boolean result) {
    this.result = result;
    return this;
  }

   /**
   * Indicates if an identification request from a browser or an Android SDK has been tampered with. Not supported in the iOS SDK, is always `false` for iOS requests.   * `true` - If the request meets either of the following conditions:     * Contains anomalous browser or device attributes that could not have been legitimately produced by the JavaScript agent or the Android SDK (see `anomalyScore`).     * Originated from an anti-detect browser like Incognition (see `antiDetectBrowser`).   * `false` - If the request is considered genuine or was generated by the iOS SDK. 
   * @return result
  **/
  @jakarta.annotation.Nonnull
  @Schema(required = true, description = "Indicates if an identification request from a browser or an Android SDK has been tampered with. Not supported in the iOS SDK, is always `false` for iOS requests.   * `true` - If the request meets either of the following conditions:     * Contains anomalous browser or device attributes that could not have been legitimately produced by the JavaScript agent or the Android SDK (see `anomalyScore`).     * Originated from an anti-detect browser like Incognition (see `antiDetectBrowser`).   * `false` - If the request is considered genuine or was generated by the iOS SDK. ")
  @JsonProperty(JSON_PROPERTY_RESULT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getResult() {
    return result;
  }


  @JsonProperty(JSON_PROPERTY_RESULT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setResult(Boolean result) {
    this.result = result;
  }


  public Tampering anomalyScore(Double anomalyScore) {
    this.anomalyScore = anomalyScore;
    return this;
  }

   /**
   * A score that indicates the extent of anomalous data in the request. This field applies to requests originating from **both** browsers and Android SDKs.    * Values above `0.5` indicate that the request has been tampered with.   * Values below `0.5` indicate that the request is genuine. 
   * minimum: 0
   * maximum: 1
   * @return anomalyScore
  **/
  @jakarta.annotation.Nonnull
  @Schema(required = true, description = "A score that indicates the extent of anomalous data in the request. This field applies to requests originating from **both** browsers and Android SDKs.    * Values above `0.5` indicate that the request has been tampered with.   * Values below `0.5` indicate that the request is genuine. ")
  @JsonProperty(JSON_PROPERTY_ANOMALY_SCORE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Double getAnomalyScore() {
    return anomalyScore;
  }


  @JsonProperty(JSON_PROPERTY_ANOMALY_SCORE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAnomalyScore(Double anomalyScore) {
    this.anomalyScore = anomalyScore;
  }


  public Tampering antiDetectBrowser(Boolean antiDetectBrowser) {
    this.antiDetectBrowser = antiDetectBrowser;
    return this;
  }

   /**
   * Anti-detect browsers try to evade identification by masking or manipulating their fingerprint to imitate legitimate browser configurations. This field does not apply to requests originating from mobile SDKs.   * `true` - The browser resembles a known anti-detect browser, for example, Incognition.   * `false` - The browser does not resemble an anti-detect browser or the request originates from a mobile SDK. 
   * @return antiDetectBrowser
  **/
  @jakarta.annotation.Nonnull
  @Schema(required = true, description = "Anti-detect browsers try to evade identification by masking or manipulating their fingerprint to imitate legitimate browser configurations. This field does not apply to requests originating from mobile SDKs.   * `true` - The browser resembles a known anti-detect browser, for example, Incognition.   * `false` - The browser does not resemble an anti-detect browser or the request originates from a mobile SDK. ")
  @JsonProperty(JSON_PROPERTY_ANTI_DETECT_BROWSER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getAntiDetectBrowser() {
    return antiDetectBrowser;
  }


  @JsonProperty(JSON_PROPERTY_ANTI_DETECT_BROWSER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAntiDetectBrowser(Boolean antiDetectBrowser) {
    this.antiDetectBrowser = antiDetectBrowser;
  }


  /**
   * Return true if this Tampering object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Tampering tampering = (Tampering) o;
    return Objects.equals(this.result, tampering.result) &&
        Objects.equals(this.anomalyScore, tampering.anomalyScore) &&
        Objects.equals(this.antiDetectBrowser, tampering.antiDetectBrowser);
  }

  @Override
  public int hashCode() {
    return Objects.hash(result, anomalyScore, antiDetectBrowser);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Tampering {\n");
    sb.append("    result: ").append(toIndentedString(result)).append("\n");
    sb.append("    anomalyScore: ").append(toIndentedString(anomalyScore)).append("\n");
    sb.append("    antiDetectBrowser: ").append(toIndentedString(antiDetectBrowser)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

