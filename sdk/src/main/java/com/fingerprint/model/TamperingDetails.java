/*
 * Server API
 * # Overview Fingerprint Server API allows you to get, search, and update Events in a server environment. It can be used for data exports, decision-making, and data analysis scenarios. Server API is intended for server-side usage, it's not intended to be used from the client side, whether it's a browser or a mobile device. 
 *
 * The version of the OpenAPI document: 4
 * Contact: support@fingerprint.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.fingerprint.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import java.util.Locale;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fingerprint.sdk.JSON;


/**
 * TamperingDetails
 */
@JsonPropertyOrder({
  TamperingDetails.JSON_PROPERTY_ANOMALY_SCORE,
  TamperingDetails.JSON_PROPERTY_ANTI_DETECT_BROWSER
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.16.0")
public class TamperingDetails {
  public static final String JSON_PROPERTY_ANOMALY_SCORE = "anomaly_score";
  @jakarta.annotation.Nullable
  private Double anomalyScore;

  public static final String JSON_PROPERTY_ANTI_DETECT_BROWSER = "anti_detect_browser";
  @jakarta.annotation.Nullable
  private Boolean antiDetectBrowser;

  public TamperingDetails() { 
  }

  public TamperingDetails anomalyScore(@jakarta.annotation.Nullable Double anomalyScore) {
    this.anomalyScore = anomalyScore;
    return this;
  }

  /**
   * Confidence score (&#x60;0.0 - 1.0&#x60;) for tampering detection:   * Values above &#x60;0.5&#x60; indicate tampering.   * Values below &#x60;0.5&#x60; indicate genuine browsers. 
   * minimum: 0
   * maximum: 1
   * @return anomalyScore
   */
  @jakarta.annotation.Nullable
  @JsonProperty(value = JSON_PROPERTY_ANOMALY_SCORE, required = false)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Double getAnomalyScore() {
    return anomalyScore;
  }


  @JsonProperty(value = JSON_PROPERTY_ANOMALY_SCORE, required = false)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAnomalyScore(@jakarta.annotation.Nullable Double anomalyScore) {
    this.anomalyScore = anomalyScore;
  }


  public TamperingDetails antiDetectBrowser(@jakarta.annotation.Nullable Boolean antiDetectBrowser) {
    this.antiDetectBrowser = antiDetectBrowser;
    return this;
  }

  /**
   * True if the identified browser resembles an \&quot;anti-detect\&quot; browser, such as Incognition, which attempts to evade identification by manipulating its fingerprint. 
   * @return antiDetectBrowser
   */
  @jakarta.annotation.Nullable
  @JsonProperty(value = JSON_PROPERTY_ANTI_DETECT_BROWSER, required = false)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getAntiDetectBrowser() {
    return antiDetectBrowser;
  }


  @JsonProperty(value = JSON_PROPERTY_ANTI_DETECT_BROWSER, required = false)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAntiDetectBrowser(@jakarta.annotation.Nullable Boolean antiDetectBrowser) {
    this.antiDetectBrowser = antiDetectBrowser;
  }


  /**
   * Return true if this TamperingDetails object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TamperingDetails tamperingDetails = (TamperingDetails) o;
    return Objects.equals(this.anomalyScore, tamperingDetails.anomalyScore) &&
        Objects.equals(this.antiDetectBrowser, tamperingDetails.antiDetectBrowser);
  }

  @Override
  public int hashCode() {
    return Objects.hash(anomalyScore, antiDetectBrowser);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TamperingDetails {\n");
    sb.append("    anomalyScore: ").append(toIndentedString(anomalyScore)).append("\n");
    sb.append("    antiDetectBrowser: ").append(toIndentedString(antiDetectBrowser)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

