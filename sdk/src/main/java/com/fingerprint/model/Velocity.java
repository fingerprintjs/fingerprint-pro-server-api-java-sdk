/*
 * Server API
 * # Overview Fingerprint Server API allows you to get, search, and update Events in a server environment. It can be used for data exports, decision-making, and data analysis scenarios. Server API is intended for server-side usage, it's not intended to be used from the client side, whether it's a browser or a mobile device. 
 *
 * The version of the OpenAPI document: 4
 * Contact: support@fingerprint.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.fingerprint.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import java.util.Locale;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fingerprint.model.VelocityData;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fingerprint.sdk.JSON;


/**
 * Sums key data points for a specific &#x60;visitor_id&#x60;, &#x60;ip_address&#x60; and &#x60;linked_id&#x60; at three distinct time intervals: 5 minutes, 1 hour, and 24 hours as follows:   - Number of distinct IP addresses associated to the visitor Id. - Number of distinct linked Ids associated with the visitor Id. - Number of distinct countries associated with the visitor Id. - Number of identification events associated with the visitor Id. - Number of identification events associated with the detected IP address. - Number of distinct IP addresses associated with the provided linked Id. - Number of distinct visitor Ids associated with the provided linked Id.  The &#x60;24h&#x60; interval of &#x60;distinct_ip&#x60;, &#x60;distinct_linked_id&#x60;, &#x60;distinct_country&#x60;, &#x60;distinct_ip_by_linked_id&#x60; and &#x60;distinct_visitor_id_by_linked_id&#x60; will be omitted  if the number of &#x60;events&#x60; for the visitor Id in the last 24 hours (&#x60;events.[&#39;24h&#39;]&#x60;) is higher than 20.000.  All will not necessarily be returned in a response, some may be omitted if the  associated event does not have the required data, such as a linked_id. 
 */
@JsonPropertyOrder({
  Velocity.JSON_PROPERTY_DISTINCT_IP,
  Velocity.JSON_PROPERTY_DISTINCT_LINKED_ID,
  Velocity.JSON_PROPERTY_DISTINCT_COUNTRY,
  Velocity.JSON_PROPERTY_EVENTS,
  Velocity.JSON_PROPERTY_IP_EVENTS,
  Velocity.JSON_PROPERTY_DISTINCT_IP_BY_LINKED_ID,
  Velocity.JSON_PROPERTY_DISTINCT_VISITOR_ID_BY_LINKED_ID
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.16.0")
public class Velocity {
  public static final String JSON_PROPERTY_DISTINCT_IP = "distinct_ip";
  @jakarta.annotation.Nullable
  private VelocityData distinctIp;

  public static final String JSON_PROPERTY_DISTINCT_LINKED_ID = "distinct_linked_id";
  @jakarta.annotation.Nullable
  private VelocityData distinctLinkedId;

  public static final String JSON_PROPERTY_DISTINCT_COUNTRY = "distinct_country";
  @jakarta.annotation.Nullable
  private VelocityData distinctCountry;

  public static final String JSON_PROPERTY_EVENTS = "events";
  @jakarta.annotation.Nullable
  private VelocityData events;

  public static final String JSON_PROPERTY_IP_EVENTS = "ip_events";
  @jakarta.annotation.Nullable
  private VelocityData ipEvents;

  public static final String JSON_PROPERTY_DISTINCT_IP_BY_LINKED_ID = "distinct_ip_by_linked_id";
  @jakarta.annotation.Nullable
  private VelocityData distinctIpByLinkedId;

  public static final String JSON_PROPERTY_DISTINCT_VISITOR_ID_BY_LINKED_ID = "distinct_visitor_id_by_linked_id";
  @jakarta.annotation.Nullable
  private VelocityData distinctVisitorIdByLinkedId;

  public Velocity() { 
  }

  public Velocity distinctIp(@jakarta.annotation.Nullable VelocityData distinctIp) {
    this.distinctIp = distinctIp;
    return this;
  }

  /**
   * Get distinctIp
   * @return distinctIp
   */
  @jakarta.annotation.Nullable
  @JsonProperty(value = JSON_PROPERTY_DISTINCT_IP, required = false)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public VelocityData getDistinctIp() {
    return distinctIp;
  }


  @JsonProperty(value = JSON_PROPERTY_DISTINCT_IP, required = false)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDistinctIp(@jakarta.annotation.Nullable VelocityData distinctIp) {
    this.distinctIp = distinctIp;
  }


  public Velocity distinctLinkedId(@jakarta.annotation.Nullable VelocityData distinctLinkedId) {
    this.distinctLinkedId = distinctLinkedId;
    return this;
  }

  /**
   * Get distinctLinkedId
   * @return distinctLinkedId
   */
  @jakarta.annotation.Nullable
  @JsonProperty(value = JSON_PROPERTY_DISTINCT_LINKED_ID, required = false)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public VelocityData getDistinctLinkedId() {
    return distinctLinkedId;
  }


  @JsonProperty(value = JSON_PROPERTY_DISTINCT_LINKED_ID, required = false)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDistinctLinkedId(@jakarta.annotation.Nullable VelocityData distinctLinkedId) {
    this.distinctLinkedId = distinctLinkedId;
  }


  public Velocity distinctCountry(@jakarta.annotation.Nullable VelocityData distinctCountry) {
    this.distinctCountry = distinctCountry;
    return this;
  }

  /**
   * Get distinctCountry
   * @return distinctCountry
   */
  @jakarta.annotation.Nullable
  @JsonProperty(value = JSON_PROPERTY_DISTINCT_COUNTRY, required = false)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public VelocityData getDistinctCountry() {
    return distinctCountry;
  }


  @JsonProperty(value = JSON_PROPERTY_DISTINCT_COUNTRY, required = false)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDistinctCountry(@jakarta.annotation.Nullable VelocityData distinctCountry) {
    this.distinctCountry = distinctCountry;
  }


  public Velocity events(@jakarta.annotation.Nullable VelocityData events) {
    this.events = events;
    return this;
  }

  /**
   * Get events
   * @return events
   */
  @jakarta.annotation.Nullable
  @JsonProperty(value = JSON_PROPERTY_EVENTS, required = false)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public VelocityData getEvents() {
    return events;
  }


  @JsonProperty(value = JSON_PROPERTY_EVENTS, required = false)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEvents(@jakarta.annotation.Nullable VelocityData events) {
    this.events = events;
  }


  public Velocity ipEvents(@jakarta.annotation.Nullable VelocityData ipEvents) {
    this.ipEvents = ipEvents;
    return this;
  }

  /**
   * Get ipEvents
   * @return ipEvents
   */
  @jakarta.annotation.Nullable
  @JsonProperty(value = JSON_PROPERTY_IP_EVENTS, required = false)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public VelocityData getIpEvents() {
    return ipEvents;
  }


  @JsonProperty(value = JSON_PROPERTY_IP_EVENTS, required = false)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIpEvents(@jakarta.annotation.Nullable VelocityData ipEvents) {
    this.ipEvents = ipEvents;
  }


  public Velocity distinctIpByLinkedId(@jakarta.annotation.Nullable VelocityData distinctIpByLinkedId) {
    this.distinctIpByLinkedId = distinctIpByLinkedId;
    return this;
  }

  /**
   * Get distinctIpByLinkedId
   * @return distinctIpByLinkedId
   */
  @jakarta.annotation.Nullable
  @JsonProperty(value = JSON_PROPERTY_DISTINCT_IP_BY_LINKED_ID, required = false)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public VelocityData getDistinctIpByLinkedId() {
    return distinctIpByLinkedId;
  }


  @JsonProperty(value = JSON_PROPERTY_DISTINCT_IP_BY_LINKED_ID, required = false)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDistinctIpByLinkedId(@jakarta.annotation.Nullable VelocityData distinctIpByLinkedId) {
    this.distinctIpByLinkedId = distinctIpByLinkedId;
  }


  public Velocity distinctVisitorIdByLinkedId(@jakarta.annotation.Nullable VelocityData distinctVisitorIdByLinkedId) {
    this.distinctVisitorIdByLinkedId = distinctVisitorIdByLinkedId;
    return this;
  }

  /**
   * Get distinctVisitorIdByLinkedId
   * @return distinctVisitorIdByLinkedId
   */
  @jakarta.annotation.Nullable
  @JsonProperty(value = JSON_PROPERTY_DISTINCT_VISITOR_ID_BY_LINKED_ID, required = false)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public VelocityData getDistinctVisitorIdByLinkedId() {
    return distinctVisitorIdByLinkedId;
  }


  @JsonProperty(value = JSON_PROPERTY_DISTINCT_VISITOR_ID_BY_LINKED_ID, required = false)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDistinctVisitorIdByLinkedId(@jakarta.annotation.Nullable VelocityData distinctVisitorIdByLinkedId) {
    this.distinctVisitorIdByLinkedId = distinctVisitorIdByLinkedId;
  }


  /**
   * Return true if this Velocity object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Velocity velocity = (Velocity) o;
    return Objects.equals(this.distinctIp, velocity.distinctIp) &&
        Objects.equals(this.distinctLinkedId, velocity.distinctLinkedId) &&
        Objects.equals(this.distinctCountry, velocity.distinctCountry) &&
        Objects.equals(this.events, velocity.events) &&
        Objects.equals(this.ipEvents, velocity.ipEvents) &&
        Objects.equals(this.distinctIpByLinkedId, velocity.distinctIpByLinkedId) &&
        Objects.equals(this.distinctVisitorIdByLinkedId, velocity.distinctVisitorIdByLinkedId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(distinctIp, distinctLinkedId, distinctCountry, events, ipEvents, distinctIpByLinkedId, distinctVisitorIdByLinkedId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Velocity {\n");
    sb.append("    distinctIp: ").append(toIndentedString(distinctIp)).append("\n");
    sb.append("    distinctLinkedId: ").append(toIndentedString(distinctLinkedId)).append("\n");
    sb.append("    distinctCountry: ").append(toIndentedString(distinctCountry)).append("\n");
    sb.append("    events: ").append(toIndentedString(events)).append("\n");
    sb.append("    ipEvents: ").append(toIndentedString(ipEvents)).append("\n");
    sb.append("    distinctIpByLinkedId: ").append(toIndentedString(distinctIpByLinkedId)).append("\n");
    sb.append("    distinctVisitorIdByLinkedId: ").append(toIndentedString(distinctVisitorIdByLinkedId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

