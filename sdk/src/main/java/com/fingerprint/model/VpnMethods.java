/*
 * Server API
 * # Overview Fingerprint Server API allows you to get, search, and update Events in a server environment. It can be used for data exports, decision-making, and data analysis scenarios. Server API is intended for server-side usage, it's not intended to be used from the client side, whether it's a browser or a mobile device. 
 *
 * The version of the OpenAPI document: 4
 * Contact: support@fingerprint.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.fingerprint.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import java.util.Locale;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fingerprint.sdk.JSON;


/**
 * VpnMethods
 */
@JsonPropertyOrder({
  VpnMethods.JSON_PROPERTY_TIMEZONE_MISMATCH,
  VpnMethods.JSON_PROPERTY_PUBLIC_VPN,
  VpnMethods.JSON_PROPERTY_AUXILIARY_MOBILE,
  VpnMethods.JSON_PROPERTY_OS_MISMATCH,
  VpnMethods.JSON_PROPERTY_RELAY
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.16.0")
public class VpnMethods {
  public static final String JSON_PROPERTY_TIMEZONE_MISMATCH = "timezone_mismatch";
  @jakarta.annotation.Nullable
  private Boolean timezoneMismatch;

  public static final String JSON_PROPERTY_PUBLIC_VPN = "public_vpn";
  @jakarta.annotation.Nullable
  private Boolean publicVpn;

  public static final String JSON_PROPERTY_AUXILIARY_MOBILE = "auxiliary_mobile";
  @jakarta.annotation.Nullable
  private Boolean auxiliaryMobile;

  public static final String JSON_PROPERTY_OS_MISMATCH = "os_mismatch";
  @jakarta.annotation.Nullable
  private Boolean osMismatch;

  public static final String JSON_PROPERTY_RELAY = "relay";
  @jakarta.annotation.Nullable
  private Boolean relay;

  public VpnMethods() { 
  }

  public VpnMethods timezoneMismatch(@jakarta.annotation.Nullable Boolean timezoneMismatch) {
    this.timezoneMismatch = timezoneMismatch;
    return this;
  }

  /**
   * The browser timezone doesn&#39;t match the timezone inferred from the request IP address.
   * @return timezoneMismatch
   */
  @jakarta.annotation.Nullable
  @JsonProperty(value = JSON_PROPERTY_TIMEZONE_MISMATCH, required = false)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getTimezoneMismatch() {
    return timezoneMismatch;
  }


  @JsonProperty(value = JSON_PROPERTY_TIMEZONE_MISMATCH, required = false)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTimezoneMismatch(@jakarta.annotation.Nullable Boolean timezoneMismatch) {
    this.timezoneMismatch = timezoneMismatch;
  }


  public VpnMethods publicVpn(@jakarta.annotation.Nullable Boolean publicVpn) {
    this.publicVpn = publicVpn;
    return this;
  }

  /**
   * Request IP address is owned and used by a public VPN service provider.
   * @return publicVpn
   */
  @jakarta.annotation.Nullable
  @JsonProperty(value = JSON_PROPERTY_PUBLIC_VPN, required = false)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getPublicVpn() {
    return publicVpn;
  }


  @JsonProperty(value = JSON_PROPERTY_PUBLIC_VPN, required = false)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPublicVpn(@jakarta.annotation.Nullable Boolean publicVpn) {
    this.publicVpn = publicVpn;
  }


  public VpnMethods auxiliaryMobile(@jakarta.annotation.Nullable Boolean auxiliaryMobile) {
    this.auxiliaryMobile = auxiliaryMobile;
    return this;
  }

  /**
   * This method applies to mobile devices only. Indicates the result of additional methods used to detect a VPN in mobile devices.
   * @return auxiliaryMobile
   */
  @jakarta.annotation.Nullable
  @JsonProperty(value = JSON_PROPERTY_AUXILIARY_MOBILE, required = false)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getAuxiliaryMobile() {
    return auxiliaryMobile;
  }


  @JsonProperty(value = JSON_PROPERTY_AUXILIARY_MOBILE, required = false)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAuxiliaryMobile(@jakarta.annotation.Nullable Boolean auxiliaryMobile) {
    this.auxiliaryMobile = auxiliaryMobile;
  }


  public VpnMethods osMismatch(@jakarta.annotation.Nullable Boolean osMismatch) {
    this.osMismatch = osMismatch;
    return this;
  }

  /**
   * The browser runs on a different operating system than the operating system inferred from the request network signature.
   * @return osMismatch
   */
  @jakarta.annotation.Nullable
  @JsonProperty(value = JSON_PROPERTY_OS_MISMATCH, required = false)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getOsMismatch() {
    return osMismatch;
  }


  @JsonProperty(value = JSON_PROPERTY_OS_MISMATCH, required = false)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOsMismatch(@jakarta.annotation.Nullable Boolean osMismatch) {
    this.osMismatch = osMismatch;
  }


  public VpnMethods relay(@jakarta.annotation.Nullable Boolean relay) {
    this.relay = relay;
    return this;
  }

  /**
   * Request IP address belongs to a relay service provider, indicating the use of relay services like [Apple Private relay](https://support.apple.com/en-us/102602) or [Cloudflare Warp](https://developers.cloudflare.com/warp-client/).  * Like VPNs, relay services anonymize the visitor&#39;s true IP address. * Unlike traditional VPNs, relay services don&#39;t let visitors spoof their location by choosing an exit node in a different country.  This field allows you to differentiate VPN users and relay service users in your fraud prevention logic. 
   * @return relay
   */
  @jakarta.annotation.Nullable
  @JsonProperty(value = JSON_PROPERTY_RELAY, required = false)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getRelay() {
    return relay;
  }


  @JsonProperty(value = JSON_PROPERTY_RELAY, required = false)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRelay(@jakarta.annotation.Nullable Boolean relay) {
    this.relay = relay;
  }


  /**
   * Return true if this VpnMethods object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VpnMethods vpnMethods = (VpnMethods) o;
    return Objects.equals(this.timezoneMismatch, vpnMethods.timezoneMismatch) &&
        Objects.equals(this.publicVpn, vpnMethods.publicVpn) &&
        Objects.equals(this.auxiliaryMobile, vpnMethods.auxiliaryMobile) &&
        Objects.equals(this.osMismatch, vpnMethods.osMismatch) &&
        Objects.equals(this.relay, vpnMethods.relay);
  }

  @Override
  public int hashCode() {
    return Objects.hash(timezoneMismatch, publicVpn, auxiliaryMobile, osMismatch, relay);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VpnMethods {\n");
    sb.append("    timezoneMismatch: ").append(toIndentedString(timezoneMismatch)).append("\n");
    sb.append("    publicVpn: ").append(toIndentedString(publicVpn)).append("\n");
    sb.append("    auxiliaryMobile: ").append(toIndentedString(auxiliaryMobile)).append("\n");
    sb.append("    osMismatch: ").append(toIndentedString(osMismatch)).append("\n");
    sb.append("    relay: ").append(toIndentedString(relay)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

