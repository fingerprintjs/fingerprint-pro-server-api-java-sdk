/*
 * Fingerprint Pro Server API
 * Fingerprint Pro Server API allows you to get information about visitors and about individual events in a server environment. This API can be used for data exports, decision-making, and data analysis scenarios.
 *
 * OpenAPI spec version: 3
 * Contact: support@fingerprint.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.fingerprint.api;

import com.fingerprint.models.EventResponse;
import com.fingerprint.models.Response;
import com.fingerprint.sdk.ApiException;
import com.google.gson.*;
import com.google.gson.stream.JsonReader;
import org.junit.Before;
import org.junit.Test;
import org.mockito.Mockito;
import org.threeten.bp.OffsetDateTime;

import java.io.FileNotFoundException;
import java.io.FileReader;
import java.lang.reflect.Type;

import static org.junit.Assert.assertEquals;
import static org.mockito.Mockito.when;


/**
 * API tests for FingerprintApi
 */
public class FingerprintApiTest {

    private FingerprintApi api;
    private Gson gson;
    private JsonReader eventJsonReader;
    private JsonReader visitsJsonReader;
    private final String MOCK_REQUEST_ID = "0KSh65EnVoB85JBmloQK";
    private final String MOCK_VISITOR_ID = "AcxioeQKffpXF8iGQK3P";
    private final String MOCK_VISITOR_REQUEST_ID = "1655373780901.HhjRFX";

    private void initializeGson() {
        gson = new GsonBuilder().registerTypeAdapter(OffsetDateTime.class, new JsonDeserializer<OffsetDateTime>() {
            @Override
            public OffsetDateTime deserialize(JsonElement json, Type type, JsonDeserializationContext jsonDeserializationContext) throws JsonParseException {
                return OffsetDateTime.parse(json.getAsString());
            }
        }).create();
    }

    private void initializeEventJsonReader() throws FileNotFoundException {
        eventJsonReader = new JsonReader(new FileReader("./mocks/get_event.json"));
    }

    private void initializeVisitsJsonReader() throws FileNotFoundException {
        visitsJsonReader = new JsonReader(new FileReader("./mocks/visits_limit_500.json"));
    }

    private EventResponse getMockEventResponse() throws FileNotFoundException {
        initializeEventJsonReader();
        return gson.fromJson(eventJsonReader, EventResponse.class);
    }

    private Response getMockVisitsResponse() throws FileNotFoundException {
        initializeVisitsJsonReader();
        return gson.fromJson(visitsJsonReader, Response.class);
    }


    @Before
    public void before() throws FileNotFoundException, ApiException {
        api = Mockito.mock(FingerprintApi.class);
        initializeGson();
        when(api.getEvent(MOCK_REQUEST_ID)).thenReturn(getMockEventResponse());
        when(api.getVisits(MOCK_VISITOR_ID, MOCK_VISITOR_REQUEST_ID, null, 50, 0)).thenReturn(getMockVisitsResponse());
    }

    /**
     * Get event by requestId
     * <p>
     * This endpoint allows you to get events with all the information from each activated product (Fingerprint Pro or Bot Detection). Use the requestId as a URL path :request_id parameter. This API method is scoped to a request, i.e. all returned information is by requestId.
     *
     * @throws Exception if the Api call fails
     */
    @Test
    public void getEventTest() throws Exception {
        EventResponse response = api.getEvent(MOCK_REQUEST_ID);
        assertEquals(response.getProducts().getIdentification().getData().getVisitorId(), "Ibk1527CUFmcnjLwIs4A9");
    }

    /**
     * Get visits by visitorId
     * <p>
     * This endpoint allows you to get a history of visits with all available information. Use the visitorId as a URL path parameter. This API method is scoped to a visitor, i.e. all returned information is by visitorId.
     *
     * @throws Exception if the Api call fails
     */
    @Test
    public void getVisitsTest() throws Exception {
        Response response = api.getVisits(MOCK_VISITOR_ID, MOCK_VISITOR_REQUEST_ID, null, 50, 0);
        assertEquals(response.getVisitorId(), MOCK_VISITOR_ID);
    }
}
