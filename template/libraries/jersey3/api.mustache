package {{package}};

import {{invokerPackage}}.ApiException;
import {{invokerPackage}}.ApiClient;
import {{invokerPackage}}.ApiResponse;
import {{invokerPackage}}.Configuration;
import {{invokerPackage}}.Pair;
import {{invokerPackage}}.Region;

import jakarta.ws.rs.core.GenericType;

{{#imports}}import {{import}};
{{/imports}}

{{^fullJavaUtil}}
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

{{/fullJavaUtil}}
{{>generatedAnnotation}}
{{#operations}}
public class {{classname}} {
  public static final String INTEGRATION_INFO = "fingerprint-pro-server-java-sdk/{{artifactVersion}}";
  private ApiClient apiClient;

  public {{classname}}() {
    this(Configuration.getDefaultApiClient());
  }

  public {{classname}}(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  public FingerprintApi(String apiKey) {
    this(Configuration.getDefaultApiClient(apiKey));
  }

  public FingerprintApi(String apiKey, Region region) {
    this(Configuration.getDefaultApiClient(apiKey, region));
  }

  /**
   * Get the API client
   *
   * @return API client
   */
  public ApiClient getApiClient() {
    return apiClient;
  }

  /**
   * Set the API client
   *
   * @param apiClient an instance of API client
   */
  public void setApiClient(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  {{#operation}}
  {{^vendorExtensions.x-flatten-optional-params}}
  {{#hasOptionalParams}}
  public static class {{operationIdCamelCase}}OptionalParams {
    {{#allParams}}
    {{^required}}private {{{dataType}}} {{paramName}};{{/required}}
    {{/allParams}}

    {{#allParams}}
    {{^required}}
    /**
    * getter for {{paramName}} - {{{description}}}
    **/
    public {{{dataType}}} get{{#lambda.titlecase}}{{paramName}}{{/lambda.titlecase}}() {
      return {{paramName}};
    }

    /**
    * setter for {{paramName}} - {{{description}}}
    **/
    public {{operationIdCamelCase}}OptionalParams set{{#lambda.titlecase}}{{paramName}}{{/lambda.titlecase}}({{{dataType}}} {{paramName}}) {
      this.{{paramName}} = {{paramName}};
      return this;
    }

    {{/required}}
    {{/allParams}}
  }
  {{/hasOptionalParams}}
  {{/vendorExtensions.x-flatten-optional-params}}
  /**
   * {{summary}}
   * {{{notes}}}
   {{^vendorExtensions.x-flatten-optional-params}}
   {{#allParams}}
   {{#required}}
   * @param {{paramName}} {{{description}}} (required)
   {{/required}}
   {{/allParams}}
   {{/vendorExtensions.x-flatten-optional-params}}
   {{#vendorExtensions.x-flatten-optional-params}}
   {{#allParams}}
   * @param {{paramName}} {{{description}}}{{#required}} (required){{/required}}{{^required}} (optional{{#defaultValue}}, default to {{.}}{{/defaultValue}}){{/required}}
   {{/allParams}}
   {{/vendorExtensions.x-flatten-optional-params}}
   {{^vendorExtensions.x-flatten-optional-params}}
   {{#hasOptionalParams}}
   * @param {{operationId}}OptionalParams Object containing optional parameters for API method.  (optional)
   {{/hasOptionalParams}}
   {{/vendorExtensions.x-flatten-optional-params}}
   {{#returnType}}
   * @return {{.}}
   {{/returnType}}
   * @throws ApiException if fails to make API call
   {{#responses.0}}
   * @http.response.details
     <table summary="Response Details" border="1">
       <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
       {{#responses}}
       <tr><td> {{code}} </td><td> {{message}} </td><td> {{#headers}} * {{baseName}} - {{{description}}} <br> {{/headers}}{{^headers.0}} - {{/headers.0}} </td></tr>
       {{/responses}}
     </table>
   {{/responses.0}}
   {{#isDeprecated}}
   * @deprecated
   {{/isDeprecated}}
   {{#externalDocs}}
   * {{{description}}}
   * @see <a href="{{url}}">{{summary}} Documentation</a>
   {{/externalDocs}}
   */
  {{#isDeprecated}}
  @Deprecated
  {{/isDeprecated}}
  {{^vendorExtensions.x-flatten-optional-params}}
  public {{#returnType}}{{{.}}} {{/returnType}}{{^returnType}}void {{/returnType}}{{operationId}}({{#allParams}}{{#required}}{{{dataType}}} {{paramName}}{{^-last}}, {{/-last}}{{/required}}{{/allParams}}{{#hasOptionalParams}}{{operationIdCamelCase}}OptionalParams {{operationId}}OptionalParams{{/hasOptionalParams}}) throws ApiException {
    {{#returnType}}return {{/returnType}}{{operationId}}WithHttpInfo({{#allParams}}{{#required}}{{paramName}}{{^-last}}, {{/-last}}{{/required}}{{/allParams}}{{#hasOptionalParams}}{{operationId}}OptionalParams{{/hasOptionalParams}}){{#returnType}}.getData(){{/returnType}};
  }
  {{/vendorExtensions.x-flatten-optional-params}}
  {{#vendorExtensions.x-flatten-optional-params}}
  public {{#returnType}}{{{.}}} {{/returnType}}{{^returnType}}void {{/returnType}}{{operationId}}({{#allParams}}{{{dataType}}} {{paramName}}{{^-last}}, {{/-last}}{{/allParams}}) throws ApiException {
    {{#returnType}}return {{/returnType}}{{operationId}}WithHttpInfo({{#allParams}}{{paramName}}{{^-last}}, {{/-last}}{{/allParams}}){{#returnType}}.getData(){{/returnType}};
  }
  {{/vendorExtensions.x-flatten-optional-params}}

  /**
   * {{summary}}
   * {{{notes}}}
   {{^vendorExtensions.x-flatten-optional-params}}
   {{#allParams}}
   {{#required}}
   * @param {{paramName}} {{{description}}} (required)
   {{/required}}
   {{/allParams}}
   {{/vendorExtensions.x-flatten-optional-params}}
   {{#vendorExtensions.x-flatten-optional-params}}
   {{#allParams}}
   * @param {{paramName}} {{{description}}}{{#required}} (required){{/required}}{{^required}} (optional{{#defaultValue}}, default to {{.}}{{/defaultValue}}){{/required}}
   {{/allParams}}
   {{/vendorExtensions.x-flatten-optional-params}}
   {{^vendorExtensions.x-flatten-optional-params}}
   {{#hasOptionalParams}}
   * @param {{operationId}}OptionalParams Object containing optional parameters for API method.  (optional)
   {{/hasOptionalParams}}
   {{/vendorExtensions.x-flatten-optional-params}}
   * @return ApiResponse<{{returnType}}{{^returnType}}Void{{/returnType}}>
   * @throws ApiException if fails to make API call
   {{#responses.0}}
   * @http.response.details
     <table summary="Response Details" border="1">
       <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
       {{#responses}}
       <tr><td> {{code}} </td><td> {{message}} </td><td> {{#headers}} * {{baseName}} - {{{description}}} <br> {{/headers}}{{^headers.0}} - {{/headers.0}} </td></tr>
       {{/responses}}
     </table>
   {{/responses.0}}
   {{#isDeprecated}}
   * @deprecated
   {{/isDeprecated}}
   {{#externalDocs}}
   * {{{description}}}
   * @see <a href="{{url}}">{{summary}} Documentation</a>
   {{/externalDocs}}
   */
  {{#isDeprecated}}
  @Deprecated
  {{/isDeprecated}}
  {{^vendorExtensions.x-flatten-optional-params}}
  public ApiResponse<{{{returnType}}}{{^returnType}}Void{{/returnType}}> {{operationId}}WithHttpInfo({{#allParams}}{{#required}}{{{dataType}}} {{paramName}}{{^-last}}, {{/-last}}{{/required}}{{/allParams}}{{#hasOptionalParams}}{{operationIdCamelCase}}OptionalParams {{operationId}}OptionalParams{{/hasOptionalParams}}) throws ApiException {
  {{/vendorExtensions.x-flatten-optional-params}}
  {{#vendorExtensions.x-flatten-optional-params}}
  public ApiResponse<{{{returnType}}}{{^returnType}}Void{{/returnType}}> {{operationId}}WithHttpInfo({{#allParams}}{{{dataType}}} {{paramName}}{{^-last}}, {{/-last}}{{/allParams}}) throws ApiException {
  {{/vendorExtensions.x-flatten-optional-params}}
    Object localVarPostBody = {{#bodyParam}}{{paramName}}{{/bodyParam}}{{^bodyParam}}null{{/bodyParam}};
    {{#allParams}}{{#required}}
    // verify the required parameter '{{paramName}}' is set
    if ({{paramName}} == null) {
      throw new ApiException(400, "Missing the required parameter '{{paramName}}' when calling {{operationId}}");
    }
    {{/required}}{{/allParams}}
    // create path and map variables
    String localVarPath = "{{{path}}}"{{#pathParams}}
      .replaceAll("\\{" + "{{baseName}}" + "\\}", apiClient.escapeString({{{paramName}}}.toString())){{/pathParams}};

    // query params
    {{javaUtilPrefix}}List<Pair> localVarQueryParams = new {{javaUtilPrefix}}ArrayList<Pair>();
    {{javaUtilPrefix}}Map<String, String> localVarHeaderParams = new {{javaUtilPrefix}}HashMap<String, String>();
    {{javaUtilPrefix}}Map<String, String> localVarCookieParams = new {{javaUtilPrefix}}HashMap<String, String>();
    {{javaUtilPrefix}}Map<String, Object> localVarFormParams = new {{javaUtilPrefix}}HashMap<String, Object>();

    localVarQueryParams.add(new Pair("ii", INTEGRATION_INFO));

    {{^vendorExtensions.x-flatten-optional-params}}
    {{#queryParams}}
    {{#required}}
    localVarQueryParams.addAll(apiClient.parameterToPairs("{{{collectionFormat}}}", "{{baseName}}", {{paramName}}));
    {{/required}}
    {{/queryParams}}
    {{#hasOptionalParams}}
    if ({{operationId}}OptionalParams != null) {
    {{#queryParams}}
    {{^required}}
      localVarQueryParams.addAll(apiClient.parameterToPairs("{{{collectionFormat}}}", "{{baseName}}", {{operationId}}OptionalParams.get{{#lambda.titlecase}}{{paramName}}{{/lambda.titlecase}}()));
    {{/required}}
    {{/queryParams}}
    }
    {{/hasOptionalParams}}
    {{/vendorExtensions.x-flatten-optional-params}}
    {{#vendorExtensions.x-flatten-optional-params}}
    {{#queryParams}}
    localVarQueryParams.addAll(apiClient.parameterToPairs("{{{collectionFormat}}}", "{{baseName}}", {{paramName}}));
    {{/queryParams}}
    {{/vendorExtensions.x-flatten-optional-params}}

    {{#headerParams}}if ({{paramName}} != null)
      localVarHeaderParams.put("{{baseName}}", apiClient.parameterToString({{paramName}}));
    {{/headerParams}}

    {{#cookieParams}}if ({{paramName}} != null)
      localVarCookieParams.put("{{baseName}}", apiClient.parameterToString({{paramName}}));
    {{/cookieParams}}

    {{#formParams}}if ({{paramName}} != null)
      localVarFormParams.put("{{baseName}}", {{paramName}});
    {{/formParams}}

    final String[] localVarAccepts = {
      {{#produces}}"{{{mediaType}}}"{{^-last}}, {{/-last}}{{/produces}}
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      {{#consumes}}"{{{mediaType}}}"{{^-last}}, {{/-last}}{{/consumes}}
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { {{#authMethods}}"{{name}}"{{^-last}}, {{/-last}}{{/authMethods}} };

    {{#returnType}}
    GenericType<{{{returnType}}}> localVarReturnType = new GenericType<{{{returnType}}}>() {};

    {{/returnType}}
    return apiClient.invokeAPI("{{classname}}.{{operationId}}", localVarPath, "{{httpMethod}}", localVarQueryParams, localVarPostBody,
                               localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType,
                               localVarAuthNames, {{#returnType}}localVarReturnType{{/returnType}}{{^returnType}}null{{/returnType}}, {{#bodyParam}}{{#isNullable}}true{{/isNullable}}{{^isNullable}}false{{/isNullable}}{{/bodyParam}}{{^bodyParam}}false{{/bodyParam}});
  }
  {{/operation}}
}
{{/operations}}
